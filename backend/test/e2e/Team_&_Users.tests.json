{
	"info": {
		"_postman_id": "ede512fa-ad90-4e48-8ffb-59332633b785",
		"name": "Team & Users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10997680"
	},
	"item": [
		{
			"name": "Get all users for teamID 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status should be 200\", () => {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"Body should be JSON format and have a body\", () => {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"})",
							"",
							"pm.test(\"Body should have specific properties\", () => {",
							"    const response = pm.response.json()",
							"    pm.expect(response.data).to.have.property(\"email\")",
							"    pm.expect(response.data).to.have.property(\"id\")",
							"    pm.expect(response.data).to.have.property(\"password\")",
							"    pm.expect(response.data).to.have.property(\"role_id\")",
							"    pm.expect(response.data).to.have.property(\"username\")",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{HOST}}:4000/api/users/teams/1",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "4000",
					"path": [
						"api",
						"users",
						"teams",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get teams with user ID 3",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{HOST}}:4000/api/teams/users/1",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "4000",
					"path": [
						"api",
						"teams",
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add user Aziz to team \"third_team\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status should be 201\", () => {",
							"    pm.response.to.have.status(201);",
							"})",
							"",
							"pm.test(\"Body should be JSON format and have a body\", () => {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"})",
							"",
							"pm.test(\"Body should have specific properties\", () => {",
							"    const response = pm.response.json()",
							"    pm.expect(response.data).to.have.property(\"id\")",
							"    pm.expect(response.data).to.have.property(\"team_id\")",
							"    pm.expect(response.data).to.have.property(\"user_id\")",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{HOST}}:4000/api/teams/3/users/3",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "4000",
					"path": [
						"api",
						"teams",
						"3",
						"users",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add user Romain to team \"third_team\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status should be 201\", () => {",
							"    pm.response.to.have.status(201);",
							"})",
							"",
							"pm.test(\"Body should be JSON format and have a body\", () => {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"})",
							"",
							"pm.test(\"Body should have specific properties\", () => {",
							"    const response = pm.response.json()",
							"    pm.expect(response.data).to.have.property(\"id\")",
							"    pm.expect(response.data).to.have.property(\"team_id\")",
							"    pm.expect(response.data).to.have.property(\"user_id\")",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{HOST}}:4000/api/teams/3/users/4",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "4000",
					"path": [
						"api",
						"teams",
						"3",
						"users",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "[FAIL] Add user Aziz to team \"third_team\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status should be 404\", () => {",
							"    pm.response.to.have.status(404);",
							"})",
							"",
							"pm.test(\"Body should be JSON format and have a body\", () => {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"})",
							"",
							"pm.test(\"Body should have specific properties\", () => {",
							"    const response = pm.response.json()",
							"    pm.expect(response).to.deep.include(",
							"        {",
							"            \"errors\": {",
							"                \"msg\": \"Constraint foreign key error.\",",
							"                \"status\": 404",
							"            }",
							"        }",
							"    )",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{HOST}}:4000/api/teams/3/users/3",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "4000",
					"path": [
						"api",
						"teams",
						"3",
						"users",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user Romain from team \"third_team\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status should be 200\", () => {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"Body should be JSON format and have a body\", () => {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"})",
							"",
							"pm.test(\"Body should have specific properties\", () => {",
							"    const response = pm.response.json()",
							"    pm.expect(response).to.have.property(\"detail\")",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{HOST}}:4000/api/teams/3/users/4",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "4000",
					"path": [
						"api",
						"teams",
						"3",
						"users",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "[FAIL] Delete user Romain from team \"third_team\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status should be 404\", () => {",
							"    pm.response.to.have.status(404);",
							"})",
							"",
							"pm.test(\"Body should be JSON format and have a body\", () => {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"})",
							"",
							"pm.test(\"Body should have specific properties\", () => {",
							"    const response = pm.response.json()",
							"    pm.expect(response).to.deep.include(",
							"        {",
							"            \"errors\": {",
							"                \"msg\": \"No corresponding result found in database.\",",
							"                \"status\": 404",
							"            }",
							"        }",
							"    )",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{HOST}}:4000/api/teams/3/users/4",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "4000",
					"path": [
						"api",
						"teams",
						"3",
						"users",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all teams with user Aziz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status should be 200\", () => {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"Body should be JSON format and have a body\", () => {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"})",
							"",
							"pm.test(\"Body should contain an array\", () => {",
							"    const response = pm.response.json()",
							"    pm.expect(response.data).to.be.an(\"array\")",
							"})",
							"",
							"pm.test(\"Body should have specific properties\", () => {",
							"    const response = pm.response.json()",
							"    pm.expect(response.data[0]).to.have.property(\"id\")",
							"    pm.expect(response.data[0]).to.have.property(\"name\")",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{HOST}}:4000/api/teams/users/3",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "4000",
					"path": [
						"api",
						"teams",
						"users",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "[FAIL] Get all teams with user ID 1000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status should be 404\", () => {",
							"    pm.response.to.have.status(404);",
							"})",
							"",
							"pm.test(\"Body should be JSON format and have a body\", () => {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"})",
							"",
							"pm.test(\"Body should have specific properties\", () => {",
							"    const response = pm.response.json()",
							"    pm.expect(response).to.deep.include(",
							"        {",
							"            \"errors\": {",
							"                \"msg\": \"No corresponding result found in database.\",",
							"                \"status\": 404",
							"            }",
							"        }",
							"    )",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{HOST}}:4000/api/teams/users/1000",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "4000",
					"path": [
						"api",
						"teams",
						"users",
						"1000"
					]
				}
			},
			"response": []
		}
	]
}